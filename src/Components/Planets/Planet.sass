@use "sass:math"
@import 'src/variables.module.sass'

.planet
  perspective: 200vmin
  transform-style: preserve-3d
  width: $planet-diameter * 1vmin
  height: $planet-diameter * 1vmin
  top: 5vmin // hard to say if this is a variable or constant 5vmin
  left: 5vmin // hard to say if this is a variable or constant 5vmin

.planet:hover
  .sphere
    animation-play-state: paused

.planet::before
  content: ''
  position: absolute
  width: 100%
  height: 100%
  top: 0%
  left: 0%
  border-radius: 50%
  transform: translateZ(1vmin)

.sphere
  transform-style: preserve-3d
  position: absolute
  animation: rotate 15s infinite linear
  transform: rotateY(0deg) rotateX(0deg)
  width: 100%
  height: 100%
  transform-origin: 50% 50%
  top: 0
  left: 0

.hemisphere
  position: absolute
  top: 0
  left: 0
  width: 100%
  height: 100%
  transform-style: preserve-3d
  transform-origin: 50% 50%
  transform: rotateX(90deg)

.hemisphere:nth-child(2)
  transform: rotateX(-90deg)

@function calc-width($layer)
  $base-chord-distance: math.sqrt($planet-radius-squared - $island-radius-squared)
  @return 2 * (math.sqrt($planet-radius-squared - ( math.pow($base-chord-distance + $shrink-factor * $layer, 2)) ))

@mixin layer-dimensions($layer)
  $length: calc-width($layer)
  height: #{$length * 1vmin}
  width: #{$length * 1vmin}
  .land
    left: 50%
    transform: translate(-50%, #{math.div(($island-diameter - $length), 2) * -1vmin})
  .land--rotated
    transform: translate(-50%, #{-$island-diameter + ((math.div(($island-diameter - $length), 2) + 3) * 1vmin )}) // 3 as in the height of the div above

@mixin gen-island($name, $island-layers, $island-diameter)
  .island--#{$name}
    width: $island-diameter * 1vmin
    height: $island-diameter * 1vmin
    left: (math.div($planet-diameter - $island-diameter, 2)) * 1vmin
  @for $i from 0 through $island-layers
    .island--#{$name}
      .plate:nth-child(#{$i})
        // alternate +/- 1 degree tilts to 'thread' the layers and make them appear as a solid block when viewing along their plane
        @if $i % 2 == 0
          transform: rotateY(1deg) translate(-50%, -50%) translateZ(#{$i * $shrink-factor * 1vmin}) rotateX(180deg) // 180deg as inverse sphere
        @else
          transform: rotateY(-1deg) translate(-50%, -50%) translateZ(#{$i * $shrink-factor * 1vmin}) rotateX(180deg)
      .plate:nth-child(#{$i})
        @include layer-dimensions($i)

.island
  position: absolute
  transform-style: preserve-3d
  transform-origin: 50% 0
  top: 50%

@include gen-island(africa, 30, 30)

.plate
  width: 50%
  height: 50%
  position: absolute
  left: 50%
  top: 50%
  transform: translate(-50%,-50%)

.land
  position: absolute

@function calculate-translation($side)
  @return math.sqrt(math.div($planet-radius-squared * $side,  math.div($total-possible-random-positions, 4))) // 4 Quadrants on an xy graph

@function get-random-z-y($seed)
  $seed-z: $seed
  @while $seed-z > $quadrant-boundary
    $seed-z: $seed-z - $quadrant-boundary
  $trans-z: calculate-translation($seed-z)
  $seed-y: $quadrant-boundary - $seed-z
  $trans-y: calculate-translation($seed-y)

  // Ensure seeds go through all four quadrants equally
  // 0 ---- z+ y+ ---- 25 ---- z- y+ ---- 50 ---- z+ y- ---- 75 ---- z- y- ---- 100
  @if $seed >= $first-quadrant-limit and $seed < $second-quadrant-limit or $seed >= $third-quadrant-limit
    $trans-z: -$trans-z
  @if $seed >= $second-quadrant-limit
    $trans-y: -$trans-y

  $point-angle: 0deg
  @if ($trans-y >=0 and $trans-z >= 0) or ($trans-y < 0 and $trans-z < 0)
    $point-angle: math.atan(math.div(math.abs($trans-z), math.abs($trans-y) ))
  @else
    $point-angle: math.atan(math.div(math.abs($trans-y), math.abs($trans-z) ))

  $quadrant-bonus: 0deg
  @if $trans-z >= 0 and $trans-y < 0
    $quadrant-bonus: 0deg
  @if $trans-z < 0 and $trans-y < 0
    $quadrant-bonus: 90deg
  @if $trans-z < 0 and $trans-y >= 0
    $quadrant-bonus: 180deg
  @if $trans-z >= 0 and $trans-y >= 0
    $quadrant-bonus: 270deg

  $chord-center-diff: math.asin(math.div($island-radius, $planet-radius))
  $rotate-x: $point-angle - $chord-center-diff + $quadrant-bonus
  @return ("rot-x": $rotate-x, "trans-y": $trans-y, "trans-z": $trans-z)

@keyframes rotate
  0%
    transform: rotateZ(-15deg) rotateX(0deg) rotateY(0deg)
// transform: rotateX(0deg) rotateY(0deg)
  100%
    transform: rotateZ(-15deg) rotateX(0deg) rotateY(360deg)
// transform: rotateX(0deg) rotateY(360deg)
