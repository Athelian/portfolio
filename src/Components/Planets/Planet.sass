@use "sass:math"
@import 'src/variables.module.sass'

$shrink-factor: 0.11 // The factor by which to raise the next layer above the previous
$island-height: $shrink-factor * $layers-per-island // The final height added by the layers piling on top of one another

.planet
  perspective: 200vmin
  transform-style: preserve-3d
  width: $planet-radius * 2vmin
  height: $planet-radius * 2vmin
  top: 5vmin
  left: 5vmin

.planet:hover
  .sphere
    animation-play-state: paused

.planet::before
  content: ''
  position: absolute
  width: 100%
  height: 100%
  top: 0%
  left: 0%
  background: rgb(91, 161, 214)
  // background: rgba(1,1,1,0.3)
  background: radial-gradient(circle farthest-corner at 3% 0%, #c5d4f1 10%, rgb(91, 161, 214) 60%)
  border-radius: 50%
  transform: translateZ(1vmin)

.sphere
  transform-style: preserve-3d
  position: absolute
  animation: rotate 5s infinite linear
  transform: rotateY(0deg) rotateX(0deg)
  width: 100%
  height: 100%
  transform-origin: 50% 50%
  top: 0
  left: 0

.hemisphere
  position: absolute
  top: 0
  left: 0
  width: 100%
  height: 100%
  transform-style: preserve-3d
  transform-origin: 50% 50%
  transform: rotateX(90deg)

.hemisphere:nth-child(2)
  transform: rotateX(-90deg)

.island
  position: absolute
  width: $island-radius * 2vmin
  height: $island-radius * 2vmin
  transform-style: preserve-3d
  transform-origin: 50% 0
  top: 50%
  left: 10vmin

.island
  .land
    background-color: rgb(91, 214, 171)

.plate
  width: 50%
  height: 50%
  position: absolute
  left: 50%
  top: 50%
  transform: translate(-50%,-50%)
  .land
    width: 100%
    height: 100%
    position: absolute
    border-radius: 50%

@function new-chord-distance($layer)

@function calc-width($layer)
  @debug $layer
  $planet-radius-sqr: $planet-radius * $planet-radius
  $island-radius-sqr: $island-radius * $island-radius
  $base-chord-distance: math.sqrt($planet-radius-sqr - $island-radius-sqr)
  // $new-chord-distance: $base-chord-distance + 0.11 *
  @return 2 * (math.sqrt($planet-radius-sqr - ( ($base-chord-distance + 0.11 * $layer) * ($base-chord-distance + 0.11 * $layer)) ))

@mixin layer-dimensions($layer)
  $length: calc-width($layer)
  height: #{$length}vmin
  width: #{$length}vmin
  @debug $length

@mixin raise-island-layer($tilt: 0, $i)
  transform: rotateY(#{$tilt}deg) translate(-50%, -50%) translateZ(calc((#{$i}vmin * #{$shrink-factor})))

@for $i from 1 through 25
  // z-elevations and island tilts
  .island
    .plate:nth-child(#{$i})
      // @if $i < 10
      //   display: none
      @if $i % 2 == 0
        @include raise-island-layer($tilt: -1, $i: $i)
      @else
        @include raise-island-layer($tilt:  1, $i: $i)
  .island--no_tilt
    .plate:nth-child(#{$i})
      @include raise-island-layer($i: $i)
  // size tailoring
  .plate:nth-child(#{$i})
    @include layer-dimensions($i)

@keyframes rotate
  0%
    transform: rotateZ(-15deg) rotateX(0deg) rotateY(0deg)
    transform: rotateX(0deg) rotateY(0deg)
  100%
    transform: rotateZ(-15deg) rotateX(0deg) rotateY(360deg)
    transform: rotateX(0deg) rotateY(360deg)
