@use "sass:math"
@import 'src/variables.module.sass'

$hypoteneuse: $planet-radius * $planet-radius + $island-radius * $island-radius
$planet-r2: $planet-radius * $planet-radius
$total-possible-random-positions: 100
$shrink-factor: 0.11 // The factor by which to raise the next layer above the previous
$island-height: $shrink-factor * $layers-per-island // The final height added by the layers piling on top of one another

@function calculate-translation($side)
  @return math.sqrt(math.div($planet-r2 * $side,  math.div($total-possible-random-positions, 4))) // 4 Quadrants on an xy graph

@function get-random-z-y($seed)
  $seed-z: $seed
  @while $seed-z > 25
    $seed-z: $seed-z - 25
  $trans-z: calculate-translation($seed-z)

  $seed-y: 25 - $seed-z
  $trans-y: calculate-translation($seed-y)

  // Ensure seeds go through all four quadrants equally
  // 0 ---- z+ y+ ---- 25 ---- z- y+ ---- 50 ---- z+ y- ---- 75 ---- z- y- ---- 100
  @if $seed > 25 and $seed < 50 or $seed > 75
    $trans-z: -$trans-z
  @if $seed > 50
    $trans-y: -$trans-y

  $point-angle: 0deg
  @if ($trans-y >=0 and $trans-z >= 0) or ($trans-y < 0 and $trans-z < 0)
    $point-angle: math.atan(math.div(math.abs($trans-z), math.abs($trans-y) ))
  @else
    $point-angle: math.atan(math.div(math.abs($trans-y), math.abs($trans-z) ))

  $quadrant-bonus: 0deg
  @if $trans-z >= 0 and $trans-y < 0
    $quadrant-bonus: 0deg
  @if $trans-z < 0 and $trans-y < 0
    $quadrant-bonus: 90deg
  @if $trans-z < 0 and $trans-y >= 0
    $quadrant-bonus: 180deg
  @if $trans-z >= 0 and $trans-y >= 0
    $quadrant-bonus: 270deg

  // Because the chord creates an angle of 60 deg, the further point
  // is the one known by the browser, so count back half of this value
  $chord-center-diff: math.asin(math.div($island-radius, $planet-radius))
  $rotate-x: $point-angle - $chord-center-diff + $quadrant-bonus
  $rotate-z: math.random(360) // try to space out in groups of 10
  // $rotation-factor: $seed
  // @while $rotation-factor > 25
    // $rotation-factor: $rotation-factor - 25
  // $rotation-factor: $rotation-factor * math.div(360, 25)
  // $rotate-z: $rotation-factor

  @return ("rot-x": $rotate-x, "rot-z": $rotate-z, "trans-y": $trans-y, "trans-z": $trans-z)

@mixin get-random-transformation($seed)
  $seeds: get-random-z-y($seed: $seed)
  transform: translateZ(#{map-get($seeds, "trans-z")}vmin) rotateZ(#{map-get($seeds, "rot-z")}deg) translateY(#{map-get($seeds, "trans-y")}vmin) rotateX(#{map-get($seeds, "rot-x")})

// Positionings
.island:nth-child(1)
  // trans-z pushes to bottom, trans-y centers the island itself, rotateX makes upside down
  transform: translateZ(-#{$planet-radius - $island-height}vmin) translateY(#{$island-radius}vmin) rotateX(180deg)
  .land
    background-color: rgb(157, 241, 247) // ice
.island:nth-child(2)
  transform: translateZ(#{$planet-radius - $island-height}vmin) translateY(-#{$island-radius}vmin) rotateX(0deg)
  .land
    background-color: rgb(157, 241, 247) // ice
@for $i from 2 through $total-possible-random-positions
  .island--#{$i}
    @include get-random-transformation($seed: $i)
