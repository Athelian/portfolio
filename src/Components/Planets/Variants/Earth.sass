@use "sass:math"
@import 'src/variables.module.sass'

$hypoteneuse: $planet-radius * $planet-radius + $island-radius * $island-radius
$planet-r2: $planet-radius * $planet-radius
$total-possible-random-positions: 100

@function calculate-translation($side)
  // @return math.sqrt($hypoteneuse * math.div($side, $total-possible-random-positions))
  @return math.sqrt(math.div($planet-r2 * $side, 100))

@function get-random-z-y($seed)
  $seed-z: $seed
  $trans-z: calculate-translation($seed-z)
  $flip-z: math.random(2)
  @if $flip-z == 1 and $seed-z < 2000
    $trans-z: -$trans-z
  @debug $seed-z
  @debug $trans-z
  $seed-y: $total-possible-random-positions - $seed-z
  $trans-y: calculate-translation($seed-y)
  $flip-y: math.random(2)
  @if $flip-y == 1
    $trans-y: -$trans-y
  @debug $trans-y

  $point-angle: 0deg
  @if ($trans-y >=0 and $trans-z >= 0) or ($trans-y < 0 and $trans-z < 0)
    $point-angle: math.atan(math.div(math.abs($trans-z), math.abs($trans-y) ))
  @else
    $point-angle: math.atan(math.div(math.abs($trans-y), math.abs($trans-z) ))

  $quadrant-bonus: 0deg
  @if $trans-z >= 0 and $trans-y < 0
    $quadrant-bonus: 0deg
  @if $trans-z < 0 and $trans-y < 0
    $quadrant-bonus: 90deg
  @if $trans-z < 0 and $trans-y >= 0
    $quadrant-bonus: 180deg
  @if $trans-z >= 0 and $trans-y >= 0
    $quadrant-bonus: 270deg

  // Because the chord creates an angle of 60 deg, the further point
  // is the one known by the browser, so count back half of this value
  $chord-center-diff: math.asin(math.div($island-radius, $planet-radius))
  $rounding-error: 3deg // not sure where this comes from, math should be correct, possibly a rounding error
  // $rotate-x: $point-angle - $chord-center-diff + $quadrant-bonus + $rounding-error
  $rotate-x: $point-angle - $chord-center-diff + $quadrant-bonus

  $rotate-z: math.random(360)

  @return ("rot-x": $rotate-x, "rot-z": $rotate-z, "trans-y": $trans-y, "trans-z": $trans-z)

@mixin get-random-transformation($seed)
  $seeds: get-random-z-y($seed: $seed)
  transform: translateZ(#{map-get($seeds, "trans-z")}vmin) rotateZ(#{map-get($seeds, "rot-z")}deg) translateY(#{map-get($seeds, "trans-y")}vmin) rotateX(#{map-get($seeds, "rot-x")})

// Positionings
.island:nth-child(1)
  // trans-z pushes to bottom, trans-y centers the island itself, rotateX makes upside down
  transform: translateZ(-#{$planet-radius}vmin) translateY(#{$island-radius}vmin) rotateX(180deg)
  .land
    background-color: rgb(157, 241, 247) // ice
.island:nth-child(2)
  transform: translateZ(#{$planet-radius}vmin) translateY(-#{$island-radius}vmin) rotateX(0deg)
  .land
    background-color: rgb(157, 241, 247) // ice
@for $i from 2 through $total-possible-random-positions
  .island--#{$i}
    @include get-random-transformation($seed: $i)
