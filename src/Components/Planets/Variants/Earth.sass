@use "sass:math"
@import 'src/variables.module.sass'

$hypoteneuse: $planet-radius * $planet-radius + $island-radius * $island-radius

@function calculate-translation($side)
  @return math.sqrt($hypoteneuse * ($side / 10))

@function get-random-z-y()
  $seed-y: math.random(10)
  $trans-y: calculate-translation($seed-y)
  $flip-y: math.random(2)
  @if $flip-y == 1
    $trans-y: -$trans-y
  $seed-z: 10 - $seed-y
  $trans-z: calculate-translation($seed-z)
  $flip-z: math.random(2)
  @if $flip-z == 1
    $trans-z: -$trans-z
  @return ("y": $trans-y, "z": $trans-z)

@mixin get-random-transformation()
  $seeds: get-random-z-y()
  transform: translateZ(#{map-get($seeds, "z")}vmin) rotateZ(296deg) translateY(#{map-get($seeds, "y")}vmin) rotateX(61deg)

// Positionings
.island:nth-child(1)
  // trans-z pushes to bottom, trans-y centers the island itself, rotateX makes upside down
  transform: translateZ(-#{$planet-radius}vmin) rotateZ(0deg) translateY(#{$island-radius}vmin) rotateX(180deg)
  .land
    background-color: rgb(157, 241, 247) // ice
.island:nth-child(2)
  // trans-z pushes to bottom, trans-y centers the island itself, rotateX makes upside down
  transform: translateZ(-#{$planet-radius}vmin) rotateZ(0deg) translateY(#{$island-radius}vmin) rotateX(180deg)
  .land
    background-color: rgb(157, 241, 247) // ice
.island:nth-child(3)
  @include get-random-transformation
.island:nth-child(4)
  @include get-random-transformation
