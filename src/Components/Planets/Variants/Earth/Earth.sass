@use "sass:math"
@import 'src/variables.module.sass'
@import 'src/Components/Planets/Planet.sass'
@import './Clouds.sass'
@import './Islands.sass'
@import "./rocket.sass"
@import "./Flags.sass"

.Earth
  display: flex
  justify-content: center
  align-items: center
  &__Clouds, &__Flags, &__Extra-Terrestrials
    display: contents
  &__Earth-Container
    z-index: 2 // Above all
    clip-path: circle(math.div($planet-diameter, 2) - math.div($layer-offset-remainder, 2) * 1vmin)
    .Planet--Earth
      &::before
        background: rgb(91, 161, 214)
        content: ''
        position: absolute
        width: 100%
        height: 100%
        border-radius: 50%
        transform: translateZ(1vmin) // unclear what the purpose of this is
      .Sphere
        animation: rotate-earth $earth-rotation-speed linear infinite
        .Land
          background-color: rgb(91, 214, 171)
  &__Extra-Terrestrials
    .Planet--Extra-Terrestrials
      position: absolute
      z-index: 2
      width: 80vmin
      height: 80vmin
      .Sphere
        animation: none
        transform: rotateY(-260deg)

  

.Planet--Clouds
  animation: elevate-cloud $cloud-rotation-speed steps(2,start) infinite
  will-change: transform // as we are elevating
  pointer-events: none
  position: absolute
  width: ($planet-diameter * 1vmin) + $cloud-total-depth + $cloud-separation-from-earth
  height: ($planet-diameter * 1vmin) + $cloud-total-depth + $cloud-separation-from-earth
  perspective: none // If there is a perspective, the cloud may not turn around quickly enough around the side
  pointer-events: none
  @for $i from 1 through 36
    $rotation: $i * 10
    &--y-rotation--#{$rotation}
      animation: elevate-cloud $cloud-rotation-speed math.div($rotation, 360) * -1 * $cloud-rotation-speed steps(2,start) infinite
  .Sphere
    animation: rotate-earth $cloud-rotation-speed linear infinite
    .hemisphere
      transform: none
      .Cloud
        > div, &:after
          background-color: white
          position: absolute
        &:after
          content: ""
      @each $cloud in $clouds
        $center-to-apex: map-get($cloud, "center-to-apex")
        .Cloud--#{map-get($cloud, "label")}
          height: map-get($cloud, "height")
          width: map-get($cloud, "width")
          transform: rotateY(90deg) translate(0, -50%) translateZ(math.div(map-get($cloud, "width"), 2) * -1)
          > div
            clip-path: map-get($cloud, "path")
            height: 100%
            width: 100%
          &:after
            height: map-get($cloud, "height") * (1 - $cloud-fin-scale-factor) // Remove 5% height to ensure no overscaling
      @for $scale-factor from 1 through 30
        $scale: math.div(math.div($scale-factor, 10), 20) // Arbitrary division value
        .Cloud--scale-#{$scale-factor}
          &:after
            width: math.div($cloud-total-depth, $scale)
            left: calc(50% - math.div(math.div($cloud-total-depth, $scale), 2))
        @each $cloud in $clouds
          .Cloud--#{map-get($cloud, "label")}.Cloud--scale-#{$scale-factor}
            > div
              transform: scale($scale)
            @for $i from 1 through $cloud-layers
              $direction: 1
              $factor: $i
              @if $i > math.div($cloud-layers, 2)
                $direction: -1
                $factor: $factor - math.div($cloud-layers, 2)
              div:nth-child(#{$i})
                transform: translateZ($cloud-layer-separation-distance * $direction * $factor) scale($scale)
            &:after
              // translate from center to apex by the appropriate amount, accounting for scale factor.
              transform: translate(map-get($cloud, "center-to-apex") * $scale * 1px, math.div($cloud-fin-scale-factor, 2) * 100% ) rotateY(90deg) scale($scale)

@keyframes elevate-flag
  0%
    z-index: 2
  100%
    z-index: 1
@keyframes elevate-cloud
  0%
    z-index: 2
  100%
    z-index: 1
@keyframes rotate-earth
  0%
    transform: rotateZ(-23.5deg) rotateX(0deg) rotateY(0deg)
  100%
    transform: rotateZ(-23.5deg) rotateX(0deg) rotateY(360deg)

$continents: map-get($earth, "continents")
$islands: map-keys($continents)
@each $island in $islands
  $props: map-get($continents, $island)
  @include gen-island($name: $island, $island-layers: map-get($props, "layers"), $island-diameter: map-get($props, "diameter"), $rotation: map-get($props, "rotation"), $z-rotation: map-get($props, "z-rotation"), $position: map-get($props, "position"))
